{"version":3,"file":"customData.js","sourceRoot":"../src","sources":["customData.ts"],"names":[],"mappings":";AAAA;;;gGAGgG;;AAEhG,6BAA6B;AAC7B,mCAAgE;AAQhE,SAAgB,iCAAiC,CAAC,gBAA+C;IAChG,MAAM,SAAS,GAAa,EAAE,CAAC;IAE/B,IAAI,CAAC,gBAAgB,EAAE;QACtB,OAAO,SAAS,CAAC;KACjB;IAED,gBAAgB,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE;QAC7B,MAAM,YAAY,GAAG,kBAAS,CAAC,gBAAgB,CAAC,SAAS,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC;QACnE,MAAM,WAAW,GAAG,YAAY,CAAC,OAAO,CAAqB,KAAK,CAAC,CAAC;QACpE,IACC,WAAW;YACX,WAAW,CAAC,oBAAoB;YAChC,WAAW,CAAC,oBAAoB,CAAC,YAAY;YAC7C,WAAW,CAAC,oBAAoB,CAAC,YAAY,CAAC,UAAU,EACvD;YACD,MAAM,UAAU,GAAG,WAAW,CAAC,oBAAoB,CAAC,YAAY,CAAC,UAAU,CAAC;YAC5E,IAAI,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;gBAC9B,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;oBACtB,IAAI,OAAO,CAAC,KAAK,QAAQ,EAAE;wBAC1B,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC;qBAC/C;gBACF,CAAC,CAAC,CAAC;aACH;SACD;IACF,CAAC,CAAC,CAAC;IAEH,OAAO,SAAS,CAAC;AAClB,CAAC;AA5BD,8EA4BC;AAED,SAAgB,mCAAmC;IAClD,MAAM,SAAS,GAAa,EAAE,CAAC;IAE/B,KAAK,MAAM,SAAS,IAAI,mBAAU,CAAC,GAAG,EAAE;QACvC,MAAM,WAAW,GAAG,SAAS,CAAC,WAAW,IAAI,SAAS,CAAC,WAAW,CAAC,WAAW,CAAC;QAE/E,IAAI,WAAW,IAAI,WAAW,CAAC,GAAG,IAAI,WAAW,CAAC,GAAG,CAAC,YAAY,CAAC,UAAU,IAAI,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,YAAY,CAAC,UAAU,CAAC,EAAE;YACxI,MAAM,aAAa,GAAa,WAAW,CAAC,GAAG,CAAC,YAAY,CAAC,UAAU,CAAC;YACxE,aAAa,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE;gBAC1B,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC,CAAC;YAC3D,CAAC,CAAC,CAAC;SACH;KACD;IAED,OAAO,SAAS,CAAC;AAClB,CAAC;AAfD,kFAeC","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as path from 'path';\nimport { workspace, WorkspaceFolder, extensions } from 'vscode';\n\ninterface ExperimentalConfig {\n\texperimental?: {\n\t\tcustomData?: string[];\n\t};\n}\n\nexport function getCustomDataPathsInAllWorkspaces(workspaceFolders: WorkspaceFolder[] | undefined): string[] {\n\tconst dataPaths: string[] = [];\n\n\tif (!workspaceFolders) {\n\t\treturn dataPaths;\n\t}\n\n\tworkspaceFolders.forEach(wf => {\n\t\tconst allCssConfig = workspace.getConfiguration(undefined, wf.uri);\n\t\tconst wfCSSConfig = allCssConfig.inspect<ExperimentalConfig>('css');\n\t\tif (\n\t\t\twfCSSConfig &&\n\t\t\twfCSSConfig.workspaceFolderValue &&\n\t\t\twfCSSConfig.workspaceFolderValue.experimental &&\n\t\t\twfCSSConfig.workspaceFolderValue.experimental.customData\n\t\t) {\n\t\t\tconst customData = wfCSSConfig.workspaceFolderValue.experimental.customData;\n\t\t\tif (Array.isArray(customData)) {\n\t\t\t\tcustomData.forEach(t => {\n\t\t\t\t\tif (typeof t === 'string') {\n\t\t\t\t\t\tdataPaths.push(path.resolve(wf.uri.fsPath, t));\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t});\n\n\treturn dataPaths;\n}\n\nexport function getCustomDataPathsFromAllExtensions(): string[] {\n\tconst dataPaths: string[] = [];\n\n\tfor (const extension of extensions.all) {\n\t\tconst contributes = extension.packageJSON && extension.packageJSON.contributes;\n\n\t\tif (contributes && contributes.css && contributes.css.experimental.customData && Array.isArray(contributes.css.experimental.customData)) {\n\t\t\tconst relativePaths: string[] = contributes.css.experimental.customData;\n\t\t\trelativePaths.forEach(rp => {\n\t\t\t\tdataPaths.push(path.resolve(extension.extensionPath, rp));\n\t\t\t});\n\t\t}\n\t}\n\n\treturn dataPaths;\n}\n"]}