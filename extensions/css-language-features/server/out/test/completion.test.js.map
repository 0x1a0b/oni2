{"version":3,"file":"completion.test.js","sourceRoot":"../../src","sources":["test/completion.test.ts"],"names":[],"mappings":"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","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport 'mocha';\nimport * as assert from 'assert';\nimport * as path from 'path';\nimport Uri from 'vscode-uri';\nimport { TextDocument, CompletionList } from 'vscode-languageserver-types';\nimport { WorkspaceFolder } from 'vscode-languageserver-protocol';\nimport { getPathCompletionParticipant } from '../pathCompletion';\nimport { getCSSLanguageService } from 'vscode-css-languageservice';\n\nexport interface ItemDescription {\n\tlabel: string;\n\tresultText?: string;\n}\n\nsuite('Completions', () => {\n\tconst cssLanguageService = getCSSLanguageService();\n\n\tlet assertCompletion = function (completions: CompletionList, expected: ItemDescription, document: TextDocument, _offset: number) {\n\t\tlet matches = completions.items.filter(completion => {\n\t\t\treturn completion.label === expected.label;\n\t\t});\n\n\t\tassert.equal(matches.length, 1, `${expected.label} should only existing once: Actual: ${completions.items.map(c => c.label).join(', ')}`);\n\t\tlet match = matches[0];\n\t\tif (expected.resultText && match.textEdit) {\n\t\t\tassert.equal(TextDocument.applyEdits(document, [match.textEdit]), expected.resultText);\n\t\t}\n\t};\n\n\tfunction assertCompletions(value: string, expected: { count?: number, items?: ItemDescription[] }, testUri: string, workspaceFolders?: WorkspaceFolder[], lang: string = 'css'): void {\n\t\tconst offset = value.indexOf('|');\n\t\tvalue = value.substr(0, offset) + value.substr(offset + 1);\n\n\t\tconst document = TextDocument.create(testUri, lang, 0, value);\n\t\tconst position = document.positionAt(offset);\n\n\t\tif (!workspaceFolders) {\n\t\t\tworkspaceFolders = [{ name: 'x', uri: testUri.substr(0, testUri.lastIndexOf('/')) }];\n\t\t}\n\n\t\tlet participantResult = CompletionList.create([]);\n\t\tcssLanguageService.setCompletionParticipants([getPathCompletionParticipant(document, workspaceFolders, participantResult)]);\n\n\t\tconst stylesheet = cssLanguageService.parseStylesheet(document);\n\t\tlet list = cssLanguageService.doComplete(document, position, stylesheet)!;\n\t\tlist.items = list.items.concat(participantResult.items);\n\n\t\tif (expected.count) {\n\t\t\tassert.equal(list.items.length, expected.count);\n\t\t}\n\t\tif (expected.items) {\n\t\t\tfor (let item of expected.items) {\n\t\t\t\tassertCompletion(list, item, document, offset);\n\t\t\t}\n\t\t}\n\t}\n\n\ttest('CSS url() Path completion', function () {\n\t\tlet testUri = Uri.file(path.resolve(__dirname, '../../test/pathCompletionFixtures/about/about.css')).toString();\n\t\tlet folders = [{ name: 'x', uri: Uri.file(path.resolve(__dirname, '../../test')).toString() }];\n\n\t\tassertCompletions('html { background-image: url(\"./|\")', {\n\t\t\titems: [\n\t\t\t\t{ label: 'about.html', resultText: 'html { background-image: url(\"./about.html\")' }\n\t\t\t]\n\t\t}, testUri, folders);\n\n\t\tassertCompletions(`html { background-image: url('../|')`, {\n\t\t\titems: [\n\t\t\t\t{ label: 'about/', resultText: `html { background-image: url('../about/')` },\n\t\t\t\t{ label: 'index.html', resultText: `html { background-image: url('../index.html')` },\n\t\t\t\t{ label: 'src/', resultText: `html { background-image: url('../src/')` }\n\t\t\t]\n\t\t}, testUri, folders);\n\n\t\tassertCompletions(`html { background-image: url('../src/a|')`, {\n\t\t\titems: [\n\t\t\t\t{ label: 'feature.js', resultText: `html { background-image: url('../src/feature.js')` },\n\t\t\t\t{ label: 'data/', resultText: `html { background-image: url('../src/data/')` },\n\t\t\t\t{ label: 'test.js', resultText: `html { background-image: url('../src/test.js')` }\n\t\t\t]\n\t\t}, testUri, folders);\n\n\t\tassertCompletions(`html { background-image: url('../src/data/f|.asar')`, {\n\t\t\titems: [\n\t\t\t\t{ label: 'foo.asar', resultText: `html { background-image: url('../src/data/foo.asar')` }\n\t\t\t]\n\t\t}, testUri, folders);\n\n\t\tassertCompletions(`html { background-image: url('|')`, {\n\t\t\titems: [\n\t\t\t\t{ label: 'about.html', resultText: `html { background-image: url('about.html')` },\n\t\t\t]\n\t\t}, testUri, folders);\n\n\t\tassertCompletions(`html { background-image: url('/|')`, {\n\t\t\titems: [\n\t\t\t\t{ label: 'pathCompletionFixtures/', resultText: `html { background-image: url('/pathCompletionFixtures/')` }\n\t\t\t]\n\t\t}, testUri, folders);\n\n\t\tassertCompletions(`html { background-image: url('/pathCompletionFixtures/|')`, {\n\t\t\titems: [\n\t\t\t\t{ label: 'about/', resultText: `html { background-image: url('/pathCompletionFixtures/about/')` },\n\t\t\t\t{ label: 'index.html', resultText: `html { background-image: url('/pathCompletionFixtures/index.html')` },\n\t\t\t\t{ label: 'src/', resultText: `html { background-image: url('/pathCompletionFixtures/src/')` }\n\t\t\t]\n\t\t}, testUri, folders);\n\n\t\tassertCompletions(`html { background-image: url(\"/|\")`, {\n\t\t\titems: [\n\t\t\t\t{ label: 'pathCompletionFixtures/', resultText: `html { background-image: url(\"/pathCompletionFixtures/\")` }\n\t\t\t]\n\t\t}, testUri, folders);\n\t});\n\n\ttest('CSS url() Path Completion - Unquoted url', function () {\n\t\tlet testUri = Uri.file(path.resolve(__dirname, '../../test/pathCompletionFixtures/about/about.css')).toString();\n\t\tlet folders = [{ name: 'x', uri: Uri.file(path.resolve(__dirname, '../../test')).toString() }];\n\n\t\tassertCompletions('html { background-image: url(./|)', {\n\t\t\titems: [\n\t\t\t\t{ label: 'about.html', resultText: 'html { background-image: url(./about.html)' }\n\t\t\t]\n\t\t}, testUri, folders);\n\n\t\tassertCompletions('html { background-image: url(./a|)', {\n\t\t\titems: [\n\t\t\t\t{ label: 'about.html', resultText: 'html { background-image: url(./about.html)' }\n\t\t\t]\n\t\t}, testUri, folders);\n\n\t\tassertCompletions('html { background-image: url(../|src/)', {\n\t\t\titems: [\n\t\t\t\t{ label: 'about/', resultText: 'html { background-image: url(../about/)' }\n\t\t\t]\n\t\t}, testUri, folders);\n\n\t\tassertCompletions('html { background-image: url(../s|rc/)', {\n\t\t\titems: [\n\t\t\t\t{ label: 'about/', resultText: 'html { background-image: url(../about/)' }\n\t\t\t]\n\t\t}, testUri, folders);\n\t});\n\n\ttest('CSS @import Path completion', function () {\n\t\tlet testUri = Uri.file(path.resolve(__dirname, '../../test/pathCompletionFixtures/about/about.css')).toString();\n\t\tlet folders = [{ name: 'x', uri: Uri.file(path.resolve(__dirname, '../../test')).toString() }];\n\n\t\tassertCompletions(`@import './|'`, {\n\t\t\titems: [\n\t\t\t\t{ label: 'about.html', resultText: `@import './about.html'` },\n\t\t\t]\n\t\t}, testUri, folders);\n\n\t\tassertCompletions(`@import '../|'`, {\n\t\t\titems: [\n\t\t\t\t{ label: 'about/', resultText: `@import '../about/'` },\n\t\t\t\t{ label: 'scss/', resultText: `@import '../scss/'` },\n\t\t\t\t{ label: 'index.html', resultText: `@import '../index.html'` },\n\t\t\t\t{ label: 'src/', resultText: `@import '../src/'` }\n\t\t\t]\n\t\t}, testUri, folders);\n\t});\n\n\t/**\n\t * For SCSS, `@import 'foo';` can be used for importing partial file `_foo.scss`\n\t */\n\ttest('SCSS @import Path completion', function () {\n\t\tlet testCSSUri = Uri.file(path.resolve(__dirname, '../../test/pathCompletionFixtures/about/about.css')).toString();\n\t\tlet folders = [{ name: 'x', uri: Uri.file(path.resolve(__dirname, '../../test')).toString() }];\n\n\t\t/**\n\t\t * We are in a CSS file, so no special treatment for SCSS partial files\n\t\t*/\n\t\tassertCompletions(`@import '../scss/|'`, {\n\t\t\titems: [\n\t\t\t\t{ label: 'main.scss', resultText: `@import '../scss/main.scss'` },\n\t\t\t\t{ label: '_foo.scss', resultText: `@import '../scss/_foo.scss'` }\n\t\t\t]\n\t\t}, testCSSUri, folders);\n\n\t\tlet testSCSSUri = Uri.file(path.resolve(__dirname, '../../test/pathCompletionFixtures/scss/main.scss')).toString();\n\t\tassertCompletions(`@import './|'`, {\n\t\t\titems: [\n\t\t\t\t{ label: '_foo.scss', resultText: `@import './foo'` }\n\t\t\t]\n\t\t}, testSCSSUri, folders, 'scss');\n\t});\n\n\ttest('Completion should ignore files/folders starting with dot', function () {\n\t\tlet testUri = Uri.file(path.resolve(__dirname, '../../test/pathCompletionFixtures/about/about.css')).toString();\n\t\tlet folders = [{ name: 'x', uri: Uri.file(path.resolve(__dirname, '../../test')).toString() }];\n\n\t\tassertCompletions('html { background-image: url(\"../|\")', {\n\t\t\tcount: 4\n\t\t}, testUri, folders);\n\n\t});\n});"]}